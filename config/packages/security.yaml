security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
                
    firewalls:     
        login:
            pattern: ^/api/login$
            stateless: true
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        token_refresh:
            pattern: ^/api/token/refresh
            stateless: true

        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        #main:
            #lazy: true
            #provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Paramétrage des droits d'accès au login 
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Paramétrage des droits d'accès à l'api 

        # ROUTES DELETES :
        # Delete User
        - { path: ^/api/dashboard/user/personnal-infos/delete-account, roles: ROLE_USER}
        - { path: ^/api/dashboard/admin/users/details/delete, roles: ROLE_ADMIN }
        # Delete Properties
        - { path: ^/api/dashboard/owner/properties/delete, roles: ROLE_OWNER }
        - { path: ^/api/dashboard/admin/properties/delete, roles: ROLE_ADMIN }
        # Delete PropertiesGallery
        - { path: ^/api/dashboard/owner/properties/details/galleryphoto/deletepictures, roles: ROLE_OWNER }
        - { path: ^/api/dashboard/admin/properties/details/galleryphoto/deletepictures, roles: ROLE_ADMIN }
        # Delete Comments
        - { path: ^/api/dashboard/user/comments/details/delete, roles: ROLE_USER }
        - { path: ^/api/dashboard/admin/comments/details/delete, roles: ROLE_ADMIN }
        # Delete Reservations
        - { path: ^/api/dashboard/user/reservations/delete, roles: ROLE_USER }
        - { path: ^/api/dashboard/admin/reservations/delete, roles: ROLE_ADMIN }
        # Delete Reports
        - { path: ^/api/dashboard/user/reports/details/delete, roles: ROLE_USER }
        - { path: ^/api/dashboard/admin/reports/details/delete, roles: ROLE_ADMIN }
        # Delete Categories
        - { path: ^/api/dashboard/admin/categories/delete, roles: ROLE_ADMIN }
        # Delete Attributes
        - { path: ^/api/dashboard/admin/categories/attributes/delete, roles: ROLE_ADMIN }
        # Delete Conversations
        - { path: ^/api/dashboard/admin/conversations/details/delete, roles: ROLE_ADMIN }
        # Delete Messages
        - { path: ^/api/dashboard/admin/conversations/details/message/delete, roles: ROLE_ADMIN }

        # ROUTES POSTS :
        # Post envoyer les paiements
        - { path: ^/api/send_payment, roles: ROLE_USER }
        # Post ajouter des attributs
        - { path: ^/api/dashboard/admin/categories/attributes/create, roles: ROLE_ADMIN }
        # Post ajouter des catégories
        - { path: ^/api/dashboard/admin/categories/create, roles: ROLE_ADMIN }
        # Post ajouter un commentaire
        - { path: ^/api/properties/id/comments, roles: ROLE_USER }
        # Post ajouter une propriété
        - { path: ^/api/dashboard/owner/properties/create, roles: ROLE_OWNER }
        # Post ajouter une image
        - { path: ^/api/dashboard/owner/properties/details/galleryphoto/id/addpictures, roles: ROLE_OWNER }
        # Post envoyé un rapport de propriété
        - { path: ^/api/properties/id/reports, roles: ROLE_USER }
        # Post envoyé un rapport de comentaire
        - { path: ^/api/properties/comments/id/reports, roles: ROLE_USER }
        # Post envoyé une réservation
        - { path: ^/api/properties/id/reservations, roles: ROLE_USER }

        #ROUTES GET :
        # Get info perso
        - { path: ^/api/dashboard/user/id/infos-personnelles, roles: ROLE_USER }
        # Get réservations
        - { path: ^/api/dashboard/user/id/reservations, roles: ROLE_USER }
        # Get reservation
        - { path: ^/api/dashboard/user/reservations/id, roles: ROLE_USER }
        # Get comments
        - { path: ^/api/dashboard/user/id/comments, roles: ROLE_USER }
        # Get comment
        - { path: ^/api/dashboard/user/comment/id, roles: ROLE_USER }
        # Get conversations
        - { path: ^/api/dashboard/user/id/conversations, roles: ROLE_USER }
        # Get conversation
        - { path: ^/api/dashboard/user/conversations/id, roles: ROLE_USER }
        # Get reports
        - { path: ^/api/dashboard/user/id/reports, roles: ROLE_USER }
        # Get report
        - { path: ^/api/dashboard/user/report/id, roles: ROLE_USER }
        # Get properties
        - { path: ^/api/dashboard/owner/id/properties, roles: ROLE_OWNER }
        # Get propertie
        - { path: ^/api/dashboard/owner/properties/id, roles: ROLE_OWNER }
        # Get reservations
        - { path: ^/api/dashboard/owner/reservations, roles: ROLE_OWNER }
        # Get reservation
        - { path: ^/api/dashboard/owner/reservations/id, roles: ROLE_OWNER }
        # Get users
        - { path: ^/api/dashboard/admin/users, roles: ROLE_ADMIN }
        # Get user
        - { path: ^/api/dashboard/admin/users/id, roles: ROLE_ADMIN }
        # Get reservations
        - { path: ^/api/dashboard/admin/reservations, roles: ROLE_ADMIN }
        # Get reservations
        - { path: ^/api/dashboard/admin/reservations/id, roles: ROLE_ADMIN }
        # Get properties
        - { path: ^/api/dashboard/admin/properties, roles: ROLE_ADMIN }
        #Get propertie
        - { path: ^/api/dashboard/admin/properties/id, roles: ROLE_ADMIN }
        # Get equipements
        - { path: ^/api/dashboard/admin/id/properties/equipments, roles: ROLE_ADMIN }
        # Get equipement
        - { path: ^/api/dashboard/admin/properties/equipments/id, roles: ROLE_ADMIN }
        # Get categories
        - { path: ^/api/dashboard/admin/categories, roles: ROLE_ADMIN }
        # Get categorie
        - { path: ^/api/dashboard/admin/categories/id, roles: ROLE_ADMIN }
        # Get attributes
        - { path: ^/api/dashboard/admin/categories/attributes, roles: ROLE_ADMIN }
        # Get attribute
        - { path: ^/api/dashboard/admin/categories/attributes/id, roles: ROLE_ADMIN }
        # Get comments
        - { path: ^/api/dashboard/admin/comments, roles: ROLE_ADMIN }
        # Get comment
        - { path: ^/api/dashboard/admin/comments/id, roles: ROLE_ADMIN }
        # Get conversations
        - { path: ^/api/dashboard/admin/conversations, roles: ROLE_ADMIN }
        # Get conversation
        - { path: ^/api/dashboard/admin/conversationsid, roles: ROLE_ADMIN }
        # Get reports
        - { path: ^/api/dashboard/admin/reports, roles: ROLE_ADMIN }
        # Get report
        - { path: ^/api/dashboard/admin/reports/id, roles: ROLE_ADMIN }